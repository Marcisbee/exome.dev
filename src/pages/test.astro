---
import DefaultLayout from "../layouts/default.astro";
import Code from "../components/code.astro";
// import { Code } from 'astro:components';
---

<script>
	class DataLsp extends HTMLElement {
		connectedCallback() {
			if (this.textContent === 'Exome') {
				this.innerHTML = `<a href="#exome">${this.textContent}</a>`;
			}
		}
	}

	customElements.define('data-lsp', DataLsp);
</script>

<DefaultLayout>
	<h1>Poop</h1>

	<p>TEST</p>

	<Code
		lang="ts"
		code={`// @noErrors
import {Exome} from "exome";
import {useStore} from "exome/react";
// ---cut---
import { Exome } from "exome"

// We'll have a store called "CounterStore"
class CounterStore extends Exome {
  // Lets set up one property "count" with default value "0"
  public count = 0

  // Now lets create action that will update "count" value
  public increment() {
    this.count += 1
  }
}
`.trim()}
	/>

	<Code
		lang="ts"
		code={`// @noErrors
import { type Exome } from "exome";
// ---cut---
function useStore<T extends Exome>(store: T): Readonly<T>
`.trim()}
	/>

	<Code
		lang="ts"
		code={`// @noErrors
/**
 * Runs the checker against a TypeScript/JavaScript code sample returning potentially
 * difference code, and a set of annotations around how it works.
 *
 * @param code The twoslash markup'd code
 * @param extension For example: "ts", "tsx", "typescript", "javascript" or "js".
 * @param options Additional options for twoslash
 */
export function twoslasher(code: string, extension: string, options: TwoSlashOptions = {}): TwoSlashReturn
`.trim()}
	/>
</DefaultLayout>
